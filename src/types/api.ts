/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["AppController_getHome"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/InstitutionAuth/Signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register a new institution */
        post: operations["InstitutionAuthController_signup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/InstitutionAuth/Login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Login institution employee */
        post: operations["InstitutionAuthController_employeeLogin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/InstitutionAuth/Refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refresh access and refresh tokens using refresh_token cookie */
        post: operations["InstitutionAuthController_refreshTokens"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/InstitutionAuth/Logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Logout institution employee and clear refresh token cookie */
        post: operations["InstitutionAuthController_logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/beneficiaryAuth/Signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register a new beneficiary */
        post: operations["BeneficiaryAuthController_signup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/beneficiaryAuth/Login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Login a beneficiary */
        post: operations["BeneficiaryAuthController_employeeLogin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/beneficiaryAuth/Refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refresh access token using refresh token (from cookie) */
        post: operations["BeneficiaryAuthController_refreshTokens"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/beneficiaryAuth/Logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Logout beneficiary and clear refresh token cookie */
        post: operations["BeneficiaryAuthController_logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/beneficiaries/{beneficiaryId}/family-members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all family members of a beneficiary */
        get: operations["FamilyMemberController_findAll"];
        put?: never;
        /** Create a new family member for a beneficiary */
        post: operations["FamilyMemberController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/beneficiaries/{beneficiaryId}/family-members/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a family member by ID */
        get: operations["FamilyMemberController_findOne"];
        put?: never;
        post?: never;
        /** Delete a family member by ID */
        delete: operations["FamilyMemberController_remove"];
        options?: never;
        head?: never;
        /** Update a family member by ID */
        patch: operations["FamilyMemberController_update"];
        trace?: never;
    };
    "/institutions/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search institutions by name or email */
        get: operations["InstitutionController_search"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/institutions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get details of a specific institution */
        get: operations["InstitutionController_findOne"];
        /** Update institution details (Admin only) */
        put: operations["InstitutionController_update"];
        post?: never;
        /** Delete an institution (Admin only) */
        delete: operations["InstitutionController_remove"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/institutions/{id}/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get status for a specific institution */
        get: operations["InstitutionController_getStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/beneficiaries/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get beneficiary by ID */
        get: operations["BeneficiaryController_findById"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update beneficiary details */
        patch: operations["BeneficiaryController_updateBeneficiary"];
        trace?: never;
    };
    "/beneficiaries/national/{nationalId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get beneficiary by national ID */
        get: operations["BeneficiaryController_getBeneficiaryByNationalId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/beneficiaries/{id}/coupons": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get coupons associated with a beneficiary */
        get: operations["BeneficiaryController_getCoupons"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/beneficiaries": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Filter beneficiaries with optional criteria (Admin, Distributer) */
        get: operations["BeneficiaryController_filterBeneficiaries"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/beneficiaries/search/{name}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search beneficiaries by name (Admin, Distributer) */
        get: operations["BeneficiaryController_searchBeneficiary"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/employees": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all employees for an institution */
        get: operations["EmployeeController_findAll"];
        put?: never;
        /** Create a new employee */
        post: operations["EmployeeController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/employees/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get statistics about employees in an institution */
        get: operations["EmployeeController_getStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/employees/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get employee by ID */
        get: operations["EmployeeController_findOne"];
        /** Update an employee */
        put: operations["EmployeeController_update"];
        post?: never;
        /** Delete an employee */
        delete: operations["EmployeeController_remove"];
        options?: never;
        head?: never;
        /** Assign Role For Employee */
        patch: operations["EmployeeController_assignRoles"];
        trace?: never;
    };
    "/employees/email/{email}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get employee by email (مش عارف اذا رح تحتاجها) */
        get: operations["EmployeeController_findByEmail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/employees/{id}/change-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Change employee password */
        put: operations["EmployeeController_changePassword"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/employees/{id}/active": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Active Employee */
        patch: operations["EmployeeController_active"];
        trace?: never;
    };
    "/employees/{id}/disActive": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** DisActive Employee */
        patch: operations["EmployeeController_disActive"];
        trace?: never;
    };
    "/distributions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all distributions for the institution */
        get: operations["DistributionController_findAll"];
        put?: never;
        /** Create a new distribution  */
        post: operations["DistributionController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/distributions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a distribution by ID */
        get: operations["DistributionController_findById"];
        put?: never;
        post?: never;
        /** Delete a distribution */
        delete: operations["DistributionController_delete"];
        options?: never;
        head?: never;
        /** Update a distribution) */
        patch: operations["DistributionController_update"];
        trace?: never;
    };
    "/distributions/{distributionId}/rounds": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all rounds for a distribution */
        get: operations["RoundController_findAll"];
        put?: never;
        /** Create a new round for a distribution */
        post: operations["RoundController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/distributions/{distributionId}/rounds/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get round by ID */
        get: operations["RoundController_findOne"];
        /** Update a round */
        put: operations["RoundController_update"];
        post?: never;
        /** Delete a round */
        delete: operations["RoundController_remove"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/distributions/{distributionId}/rounds/{id}/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get statistics for a round */
        get: operations["RoundController_getStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/coupons": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all coupons for an institution */
        get: operations["CouponController_findAll"];
        put?: never;
        /** Create a new coupon */
        post: operations["CouponController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/coupons/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a coupon by ID */
        get: operations["CouponController_findOne"];
        put?: never;
        post?: never;
        /** Delete a coupon by ID */
        delete: operations["CouponController_remove"];
        options?: never;
        head?: never;
        /** Update a coupon by ID */
        patch: operations["CouponController_update"];
        trace?: never;
    };
    "/rounds/{roundId}/allocations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all allocations for a round (Admin, Distributer, Deliverer) */
        get: operations["RoundBeneficiaryController_getAllocations"];
        put?: never;
        /** Allocate beneficiaries to a round (Admin, Distributer) */
        post: operations["RoundBeneficiaryController_allocate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rounds/{roundId}/allocations/deliver": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Deliver a coupon to a beneficiary (Admin, Deliverer) */
        post: operations["RoundBeneficiaryController_deliverCoupon"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rounds/{roundId}/allocations/stats/{roundId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get delivery statistics for a round (Admin, Distributer, Deliverer) */
        get: operations["RoundBeneficiaryController_getStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/rounds/{roundId}/allocations/search/{couponCode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search for a delivered coupon by its code (Admin, Deliverer) */
        get: operations["RoundBeneficiaryController_searchByCouponCode"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/posts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all posts
         * @description Retrieve all posts with optional institution filtering. Requires PUBLISHER role.
         */
        get: operations["PostsController_findAll"];
        put?: never;
        /**
         * Create a new post
         * @description Create a new post. Requires PUBLISHER role and JWT authentication.
         */
        post: operations["PostsController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/posts/institution/{institutionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get posts by institution
         * @description Retrieve all posts for a specific institution. Requires PUBLISHER role.
         */
        get: operations["PostsController_getInstitutionPosts"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/posts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get post by ID
         * @description Retrieve a specific post by its ID. Requires PUBLISHER role.
         */
        get: operations["PostsController_findOne"];
        /**
         * Update a post
         * @description Update an existing post. Requires PUBLISHER role.
         */
        put: operations["PostsController_update"];
        post?: never;
        /**
         * Delete a post
         * @description Delete a post by ID. This is a soft delete. Requires PUBLISHER role.
         */
        delete: operations["PostsController_remove"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/messages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a new message (Admin, Distributer) */
        post: operations["MessagesController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/messages/institution/{institutionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all messages for an institution (Admin, Distributer) */
        get: operations["MessagesController_findAll"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/messages/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get message by ID */
        get: operations["MessagesController_findOne"];
        /** Update a message (Admin, Distributer) */
        put: operations["MessagesController_update"];
        post?: never;
        /** Delete a message (Admin, Distributer) */
        delete: operations["MessagesController_remove"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/messages/{id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Change Message Status To Sent (Admin, Distributer) */
        post: operations["MessagesController_changeMessageStatusToSent"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/messages/{id}/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get statistics for a message (Admin, Distributer) */
        get: operations["MessagesController_getStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/messages/{id}/send": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send message to array of Beneficiareis (IDs) (Admin, Distributer) */
        post: operations["MessagesController_sendMessageToBeneficiaries"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/messages/{messageId}/{roundId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send message to beneficiaries of Round (Admin, Distributer) */
        post: operations["MessagesController_sendMessageToRoundBeneficiaries"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/message-delivery/{id}/read": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Mark message as read */
        patch: operations["MessageDeliveryController_markAsRead"];
        trace?: never;
    };
    "/message-delivery/beneficiary/{beneficiaryId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all messages for a specific beneficiary */
        get: operations["MessageDeliveryController_getBeneficiaryMessages"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/message-delivery/beneficiary/{beneficiaryId}/unread-count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get unread messages count for a beneficiary */
        get: operations["MessageDeliveryController_getUnreadCount"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/message-delivery/{id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Update delivery status of a message */
        patch: operations["MessageDeliveryController_updateDeliveryStatus"];
        trace?: never;
    };
    "/uploads/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get beneficiary profile image
         * @description Get the profile image of the authenticated beneficiary
         */
        get: operations["UploadsController_getBeneficiaryProfileImage"];
        put?: never;
        /**
         * Upload profile image
         * @description Upload a profile image for the authenticated beneficiary
         */
        post: operations["UploadsController_uploadProfileImage"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/uploads/post/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get post images
         * @description Get all images associated with a specific post
         */
        get: operations["UploadsController_getPostImages"];
        put?: never;
        /**
         * Upload post images
         * @description Upload multiple images for a specific post
         */
        post: operations["UploadsController_uploadPostImages"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/uploads/profile/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get beneficiary profile image by ID
         * @description Get the profile image of a specific beneficiary by their ID
         */
        get: operations["UploadsController_getprofileImage"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/uploads/post/{postId}/image/{imageName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete post image
         * @description Delete a specific image from a post
         */
        delete: operations["UploadsController_deletePostImage"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/uploads/profile-image": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete profile image
         * @description Delete the profile image of the authenticated beneficiary
         */
        delete: operations["UploadsController_deleteProfileImage"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        InstitutionSignupDto: {
            /**
             * @description The name of the institution
             * @example Wisal Organization
             */
            name: string;
            /**
             * @description The official email of the institution
             * @example contact@wisal.org
             */
            email: string;
            /**
             * @description Phone number of the institution (optional)
             * @example +972599123456
             */
            phone?: string;
            /**
             * @description Full name of the institution admin
             * @example Omar Khaled
             */
            adminFullName: string;
            /**
             * @description Admin email address
             * @example admin@wisal.org
             */
            adminEmail: string;
            /**
             * @description Admin password (minimum 6 characters)
             * @example StrongPass123
             */
            adminPassword: string;
        };
        EmployeeLoginDto: {
            /**
             * Format: email
             * @description Valid email address of the employee
             * @example admin@wisal.org
             */
            email: string;
            /**
             * @description Password of the employee (min 6 characters)
             * @example StrongPass123
             */
            password: string;
        };
        BeneficiarySignupDto: {
            /**
             * @description Full name of the beneficiary
             * @example Anas El-Faleh
             */
            fullName: string;
            /**
             * @description National ID of the beneficiary
             * @example 123456789
             */
            nationalId: string;
            /**
             * @description Phone number of the beneficiary
             * @example +970599123456
             */
            phone: string;
            /**
             * @description Password for the account
             * @example secret123
             */
            password: string;
        };
        BeneficiaryLoginDto: {
            /**
             * @description National ID of the beneficiary
             * @example 123456789
             */
            nationalId: string;
            /**
             * @description Password of the beneficiary
             * @example secret123
             */
            password: string;
        };
        CreateFamilyMemberDto: {
            /**
             * @description Full name of the family member
             * @example Baraa El-Faleh
             */
            fullName: string;
            /**
             * @description National ID (exactly 9 digits)
             * @example 123456789
             */
            nationalId: string;
            /**
             * @description Health status of the family member
             * @example MARTYR
             * @enum {string}
             */
            healthStatus: "NORMAL" | "CHRONIC_DISEASE" | "SPECIAL_NEEDS" | "MARTYR";
            /**
             * @description Relationship to the applicant
             * @example CHILD
             * @enum {string}
             */
            relationship: "SPOUSE" | "CHILD" | "PARENT";
            /**
             * Format: date
             * @description Date of birth
             * @example 2005-08-15
             */
            dateOfBirth: string;
            /**
             * @description Gender of the beneficiary
             * @example MALE
             * @enum {string}
             */
            gender: "MALE" | "FEMALE";
        };
        UpdateFamilyMemberDto: {
            /**
             * @description Full name of the family member
             * @example Ahmed El-Faleh
             */
            fullName?: string;
            /**
             * @description National ID (must be exactly 9 digits)
             * @example 123456789
             */
            nationalId?: string;
            /**
             * @description Health status of the family member
             * @example SPECIAL_NEEDS
             * @enum {string}
             */
            healthStatus?: "NORMAL" | "CHRONIC_DISEASE" | "SPECIAL_NEEDS" | "MARTYR";
            /**
             * @description Relationship to the beneficiary
             * @example SPOUSE
             * @enum {string}
             */
            relationship?: "SPOUSE" | "CHILD" | "PARENT";
            /**
             * Format: date-time
             * @description Date of birth of the family member
             * @example 2000-05-15T00:00:00.000Z
             */
            dateOfBirth?: string;
            /**
             * @description Gender of the family member
             * @example MALE
             * @enum {string}
             */
            gender?: "MALE" | "FEMALE";
        };
        UpdateInstitutionDto: {
            /**
             * @description The name of the institution
             * @example Palestine Relief Org
             */
            name?: string;
            /**
             * @description The email address of the institution
             * @example contact@wisal.org
             */
            email?: string;
            /**
             * @description The phone number of the institution
             * @example +970599123456
             */
            phone?: string;
        };
        UpdateBeneficiaryDto: {
            /**
             * @description Full name of the beneficiary
             * @example Ahmed Ali
             */
            fullName?: string;
            /**
             * @description Phone number of the beneficiary
             * @example +970599123456
             */
            phone?: string;
            /**
             * @description Address of the beneficiary
             * @example Gaza City, Palestine
             */
            address?: string;
            /**
             * @description Health status of the beneficiary
             * @example CHRONIC_DISEASE
             * @enum {string}
             */
            healthStatus?: "NORMAL" | "CHRONIC_DISEASE" | "SPECIAL_NEEDS" | "MARTYR";
            /**
             * Format: date
             * @description Date of birth of the beneficiary
             * @example 1990-05-15
             */
            dateOfBirth?: string;
            /**
             * @description Housing status of the beneficiary
             * @example TENT
             * @enum {string}
             */
            housingStatus?: "TENT" | "RENT" | "OWNED";
            /**
             * @description Gender of the beneficiary
             * @example MALE
             * @enum {string}
             */
            gender?: "MALE" | "FEMALE";
            /**
             * @description Monthly income of the beneficiary in USD
             * @example 300
             */
            income?: number;
        };
        CreateEmployeeDto: {
            /**
             * @description Full name of the employee
             * @example Mohamed Ahmed
             */
            fullName: string;
            /**
             * @description Valid email address of the employee
             * @example m.ahmed@example.com
             */
            email: string;
            /**
             * @description Password of the employee
             * @example password123
             */
            password: string;
            /**
             * @description Employment status (ACTIVE / INACTIVE )
             * @example ACTIVE
             * @enum {string}
             */
            status?: "ACTIVE" | "INACTIVE";
            /**
             * @description ID (UUID) of the institution the employee belongs to
             * @example bd4bc80f-af1b-4e1e-a028-535c1f3f32a8
             */
            institutionId: string;
        };
        UpdateEmployeeDto: {
            /**
             * @description Updated full name of the employee
             * @example Ahmed Mohamed (updated)
             */
            fullName?: string;
            /**
             * @description Updated status of the employee
             * @example INACTIVE
             * @enum {string}
             */
            status?: "ACTIVE" | "INACTIVE";
        };
        ChangePasswordDto: {
            /**
             * @description The current password of the employee
             * @example oldPassword123
             */
            oldPassword: string;
            /**
             * @description The new password to replace the old one (must meet security requirements)
             * @example newPassword456
             */
            newPassword: string;
        };
        AssignRolesDto: {
            /**
             * @description Role Of The Institution Employee
             * @example DISTRIBUTER
             * @enum {string}
             */
            role: "ADMIN" | "DISTRIBUTER" | "PUBLISHER" | "DELIVERER";
        };
        CreateDistributionDto: {
            /**
             * @description Title of the distribution event
             * @example Ramadan Food Distribution
             */
            title: string;
            /**
             * Format: date
             * @description Start date of the distribution
             * @example 2025-09-10
             */
            startDate: string;
            /**
             * Format: date
             * @description End date of the distribution
             * @example 2025-09-20
             */
            endDate: string;
            /**
             * @description Status of the distribution
             * @example ACTIVE
             * @enum {string}
             */
            status: "DRAFT" | "ACTIVE" | "COMPLETED" | "CANCELLED";
            /**
             * @description Optional description
             * @example Food packs for Gaza families
             */
            description?: string;
            /**
             * @description Coupon template ID
             * @example f185dff9-15c1-47eb-b3d6-8494f31138f9
             */
            couponTemplateId: string;
        };
        UpdateDistributionDto: {
            /**
             * @description Title of the distribution event
             * @example VIP Distribution
             */
            title?: string;
            /**
             * Format: date
             * @description Start date of the distribution
             * @example 2025-09-10
             */
            startDate?: string;
            /**
             * Format: date
             * @description End date of the distribution
             * @example 2025-09-20
             */
            endDate?: string;
            /**
             * @description Status of the distribution
             * @example COMPLETED
             * @enum {string}
             */
            status?: "DRAFT" | "ACTIVE" | "COMPLETED" | "CANCELLED";
            /**
             * @description Optional description
             * @example Food packs for Gaza families
             */
            description?: string;
            /**
             * @description Coupon template ID
             * @example e3e9bd7c-6d87-4c2e-b82a-9dc82d09d25e
             */
            couponTemplateId?: string;
        };
        CreateRoundDto: {
            /**
             * @description Round number
             * @example 1
             */
            roundNumber: number;
            /**
             * @description Number of coupons in the round
             * @example 100
             */
            couponCount: number;
            /**
             * Format: date-time
             * @description End date of the round
             * @example 2024-04-30T23:59:59Z
             */
            endDate: string;
            /**
             * Format: date-time
             * @description Start date of the round
             * @example 2024-03-01T00:00:00Z
             */
            startDate?: string;
        };
        UpdateRoundDto: {
            /**
             * @example ACTIVE
             * @enum {string}
             */
            status?: "ACTIVE" | "PENDING" | "COMPLETED";
        };
        CreateCouponDto: {
            /**
             * @description The name of the coupon
             * @example Food Package
             */
            name: string;
            /**
             * @description The type of the coupon
             * @example FOOD
             * @enum {string}
             */
            type: "CASH" | "FOOD" | "SHOPPING" | "OTHER";
            /**
             * @description Optional description of the coupon
             * @example Coupon for monthly food distribution
             */
            description?: string;
            /**
             * @description The institution ID associated with this coupon
             * @example 3fa85f64-5717-4562-b3fc-2c963f66afa6
             */
            institutionId: string;
        };
        UpdateCouponDto: {
            /**
             * @description The updated name of the coupon
             * @example Updated Food Package
             */
            name?: string;
            /**
             * @description The updated type of the coupon
             * @example CASH
             * @enum {string}
             */
            type?: "CASH" | "FOOD" | "SHOPPING" | "OTHER";
            /**
             * @description Optional updated description of the coupon
             * @example Updated description for the coupon
             */
            description?: string;
        };
        AllocateBeneficiariesDto: {
            /**
             * @description List of beneficiary IDs to allocate to the round
             * @example [
             *       "beneficiaryId-1 (UUID)",
             *       "beneficiaryId-2 (UUID)"
             *     ]
             */
            beneficiaryIds: string[];
        };
        DeliverCouponDto: {
            /**
             * @description Coupon code to be delivered
             * @example FO-R1-ABC123DEF
             */
            couponCode: string;
        };
        CreatePostDto: {
            /**
             * @description Post title
             * @example Welcome to Our Platform
             */
            title: string;
            /**
             * @description Post content
             * @example This is the content of the post...
             */
            content: string;
            /**
             * @description Array of image URLs
             * @example [
             *       "https://example.com/image1.jpg",
             *       "https://example.com/image2.jpg"
             *     ]
             */
            images?: string[];
            /**
             * @description Institution ID
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            institutionId: string;
        };
        PostResponseDto: {
            /**
             * @description Unique post ID
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            id: string;
            /**
             * @description Post title
             * @example Post Title
             */
            title: string;
            /**
             * @description Post content
             * @example Post content...
             */
            content: string;
            /**
             * @description Post summary
             * @example Post summary
             */
            summary?: string;
            /**
             * @description Array of image URLs
             * @example [
             *       "https://example.com/image1.jpg",
             *       "https://example.com/image2.jpg"
             *     ]
             */
            images?: string[];
            /**
             * @description Institution ID
             * @example 123e4567-e89b-12d3-a456-426614174000
             */
            institutionId: string;
            /**
             * Format: date-time
             * @description Creation timestamp
             * @example 2024-01-01T00:00:00.000Z
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description Last update timestamp
             * @example 2024-01-01T00:00:00.000Z
             */
            updatedAt: string;
        };
        PostsListResponseDto: {
            /** @description List of posts */
            data: components["schemas"]["PostResponseDto"][];
            /**
             * @description Total number of posts
             * @example 10
             */
            total: number;
        };
        UpdatePostDto: {
            /**
             * @description Updated post title
             * @example Updated Post Title
             */
            title?: string;
            /**
             * @description Updated post content
             * @example Updated post content...
             */
            content?: string;
            /**
             * @description Updated post summary
             * @example Updated post summary
             */
            summary?: string;
            /**
             * @description Updated image URL
             * @example https://example.com/new-image.jpg
             */
            imageUrl?: string;
        };
        CreateMessageDto: {
            /**
             * @description The title of the message
             * @example Message title
             */
            title: string;
            /**
             * @description The body/content of the message
             * @example Message content...
             */
            content: string;
            /**
             * @description The type of the message (e.g., NOTIFICATION, ALERT, REMINDER)
             * @example NOTIFICATION
             * @enum {string}
             */
            type: "NOTIFICATION" | "ALERT" | "PROMOTION" | "REMINDER" | "UPDATE";
            /**
             * @description The ID of the institution
             * @example institution-id-123
             */
            institutionId: string;
            /**
             * @description The ID of the round (optional)
             * @example round-id-123
             */
            roundId?: string;
        };
        UpdateMessageDto: {
            /**
             * @description The title of the message
             * @example Message title
             */
            title?: string;
            /**
             * @description The body/content of the message
             * @example Message content...
             */
            content?: string;
            /**
             * @description The type of the message (e.g., NOTIFICATION, ALERT, REMINDER)
             * @example NOTIFICATION
             * @enum {string}
             */
            type?: "NOTIFICATION" | "ALERT" | "PROMOTION" | "REMINDER" | "UPDATE";
            /**
             * @description The ID of the institution
             * @example institution-id-123
             */
            institutionId?: string;
            /**
             * @description The ID of the round (optional)
             * @example round-id-123
             */
            roundId?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AppController_getHome: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InstitutionAuthController_signup: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InstitutionSignupDto"];
            };
        };
        responses: {
            /** @description Institution successfully registered */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InstitutionAuthController_employeeLogin: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmployeeLoginDto"];
            };
        };
        responses: {
            /** @description Login successful, tokens returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid credentials */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InstitutionAuthController_refreshTokens: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description New tokens issued */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized or invalid refresh token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InstitutionAuthController_logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully logged out */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized, invalid or missing JWT */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    BeneficiaryAuthController_signup: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BeneficiarySignupDto"];
            };
        };
        responses: {
            /** @description Beneficiary registered successfully with tokens. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation error. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    BeneficiaryAuthController_employeeLogin: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BeneficiaryLoginDto"];
            };
        };
        responses: {
            /** @description Login successful. Returns access and refresh tokens. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid credentials. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    BeneficiaryAuthController_refreshTokens: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tokens refreshed successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid or expired refresh token. */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    BeneficiaryAuthController_logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Logged out successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FamilyMemberController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                beneficiaryId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of family members returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FamilyMemberController_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                beneficiaryId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateFamilyMemberDto"];
            };
        };
        responses: {
            /** @description Family member created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FamilyMemberController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Family member returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Family member not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FamilyMemberController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Family member deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Family member not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    FamilyMemberController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateFamilyMemberDto"];
            };
        };
        responses: {
            /** @description Family member updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Family member not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InstitutionController_search: {
        parameters: {
            query: {
                /** @description Search query (e.g., part of institution name or email) */
                q: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of matching institutions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InstitutionController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Institution found successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Institution not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InstitutionController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateInstitutionDto"];
            };
        };
        responses: {
            /** @description Institution updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden. Only admins can update institutions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InstitutionController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Institution deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden. Only admins can delete institutions */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    InstitutionController_getStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Institution status retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    BeneficiaryController_findById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Beneficiary ID (UUID) */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Beneficiary details returned successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    BeneficiaryController_updateBeneficiary: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Beneficiary ID (UUID) */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateBeneficiaryDto"];
            };
        };
        responses: {
            /** @description Beneficiary updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    BeneficiaryController_getBeneficiaryByNationalId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description National ID number */
                nationalId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    BeneficiaryController_getCoupons: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Beneficiary ID (UUID) */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    BeneficiaryController_filterBeneficiaries: {
        parameters: {
            query?: {
                /** @description Filter by health status */
                healthStatus?: "NORMAL" | "CHRONIC_DISEASE" | "SPECIAL_NEEDS" | "MARTYR";
                /** @description Filter by housing status */
                housingStatus?: "TENT" | "RENT" | "OWNED";
                /** @description Minimum income filter (USD) */
                minIncome?: number;
                /** @description Maximum income filter (USD) */
                maxIncome?: number;
                /** @description Minimum family size filter */
                minFamilySize?: number;
                /** @description Maximum family size filter */
                maxFamilySize?: number;
                /** @description Page number for pagination (default: 1) */
                page?: number;
                /** @description Number of items per page for pagination (default: 10) */
                limit?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    BeneficiaryController_searchBeneficiary: {
        parameters: {
            query: {
                /** @description Beneficiary full name or partial */
                name: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EmployeeController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of employees returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EmployeeController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateEmployeeDto"];
            };
        };
        responses: {
            /** @description Employee successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EmployeeController_getStats: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Statistics returned successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EmployeeController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Employee ID (UUID) */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Employee returned successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Employee not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EmployeeController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Employee ID (UUID) */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateEmployeeDto"];
            };
        };
        responses: {
            /** @description Employee updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Employee not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EmployeeController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Employee ID (UUID) */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Employee deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Employee not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EmployeeController_assignRoles: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Employee ID (UUID) */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AssignRolesDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EmployeeController_findByEmail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                email: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Employee returned successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Employee not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EmployeeController_changePassword: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Employee ID (UUID) */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ChangePasswordDto"];
            };
        };
        responses: {
            /** @description Password updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid old password or validation failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EmployeeController_active: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Employee ID (UUID) */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EmployeeController_disActive: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Employee ID (UUID) */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    DistributionController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of distributions returned successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    DistributionController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateDistributionDto"];
            };
        };
        responses: {
            /** @description Distribution created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    DistributionController_findById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Distribution ID (UUID) */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Distribution returned successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Distribution not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    DistributionController_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Distribution ID (UUID) */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Distribution deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Distribution not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    DistributionController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Distribution ID (UUID) */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateDistributionDto"];
            };
        };
        responses: {
            /** @description Distribution updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Distribution not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoundController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description distribution ID (UUID) */
                distributionId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of rounds returned successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoundController_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description distribution ID (UUID) */
                distributionId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateRoundDto"];
            };
        };
        responses: {
            /** @description Round successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoundController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Round ID (UUID) */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Round returned successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Round not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoundController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Round ID (UUID) */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateRoundDto"];
            };
        };
        responses: {
            /** @description Round updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Round not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoundController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Round ID (UUID) */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Round deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Round not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoundController_getStats: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Round ID (UUID) */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Round statistics returned successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CouponController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of coupons returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CouponController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCouponDto"];
            };
        };
        responses: {
            /** @description Coupon successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CouponController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Coupon ID (UUID) */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Coupon found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Coupon not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CouponController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Coupon ID (UUID) */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Coupon successfully deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Coupon not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CouponController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Coupon ID (UUID) */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCouponDto"];
            };
        };
        responses: {
            /** @description Coupon successfully updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Coupon not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoundBeneficiaryController_getAllocations: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Round ID (UUID) */
                roundId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Allocations returned successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoundBeneficiaryController_allocate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Round ID (UUID) */
                roundId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AllocateBeneficiariesDto"];
            };
        };
        responses: {
            /** @description Beneficiaries allocated successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoundBeneficiaryController_deliverCoupon: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DeliverCouponDto"];
            };
        };
        responses: {
            /** @description Coupon delivered successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoundBeneficiaryController_getStats: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Round ID (UUID) */
                roundId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Statistics returned successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RoundBeneficiaryController_searchByCouponCode: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Coupon code to search for */
                couponCode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Coupon found successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PostsController_findAll: {
        parameters: {
            query?: {
                /** @description Filter posts by institution ID */
                institutionId?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Posts retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostsListResponseDto"];
                };
            };
            /** @description Unauthorized - Invalid or missing JWT token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - User does not have PUBLISHER role */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PostsController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Post creation data */
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreatePostDto"];
            };
        };
        responses: {
            /** @description Post created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostResponseDto"];
                };
            };
            /** @description Bad request - Validation failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - Invalid or missing JWT token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - User does not have PUBLISHER role */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Institution not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PostsController_getInstitutionPosts: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Institution ID */
                institutionId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Institution posts retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostsListResponseDto"];
                };
            };
            /** @description Unauthorized - Invalid or missing JWT token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - User does not have PUBLISHER role */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Institution not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PostsController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Post ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Post retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostResponseDto"];
                };
            };
            /** @description Unauthorized - Invalid or missing JWT token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - User does not have PUBLISHER role */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Post not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PostsController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Post ID to update */
                id: string;
            };
            cookie?: never;
        };
        /** @description Post update data */
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdatePostDto"];
            };
        };
        responses: {
            /** @description Post updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostResponseDto"];
                };
            };
            /** @description Bad request - Validation failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized - Invalid or missing JWT token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - User does not have PUBLISHER role */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Post not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PostsController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Post ID to delete */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Post deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Unauthorized - Invalid or missing JWT token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden - User does not have PUBLISHER role */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Post not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MessagesController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateMessageDto"];
            };
        };
        responses: {
            /** @description Message successfully created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MessagesController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Institution ID (UUID) */
                institutionId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of messages returned successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MessagesController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Message ID (UUID) */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Message returned successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Message not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MessagesController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Message ID (UUID) */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateMessageDto"];
            };
        };
        responses: {
            /** @description Message updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Message not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MessagesController_remove: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Message ID (UUID) */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Message deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Message not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MessagesController_changeMessageStatusToSent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Message ID (UUID) */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Message sent successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Message not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MessagesController_getStats: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Message ID (UUID) */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Message statistics returned successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MessagesController_sendMessageToBeneficiaries: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Message ID (UUID) */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Message sent successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Message or not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MessagesController_sendMessageToRoundBeneficiaries: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
                /** @description Round ID (UUID) */
                roundId: unknown;
                /** @description Message ID (UUID) */
                messageId: unknown;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Message sent successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Message or Round not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MessageDeliveryController_markAsRead: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Message delivery ID (UUID) */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Message marked as read successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Message not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MessageDeliveryController_getBeneficiaryMessages: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Beneficiary ID (UUID) */
                beneficiaryId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of messages returned successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MessageDeliveryController_getUnreadCount: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Beneficiary ID (UUID) */
                beneficiaryId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Unread messages count returned successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    MessageDeliveryController_updateDeliveryStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Message delivery ID (UUID) */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @enum {string} */
                    status: "PENDING" | "SENT" | "DELIVERED" | "READ" | "FAILED";
                    /** @example Failed due to invalid phone number */
                    errorReason?: string;
                };
            };
        };
        responses: {
            /** @description Delivery status updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Message not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UploadsController_getBeneficiaryProfileImage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Profile image retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Profile image not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UploadsController_uploadProfileImage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Profile image file */
        requestBody: {
            content: {
                "multipart/form-data": {
                    /**
                     * Format: binary
                     * @description Image file (JPEG, PNG, etc.)
                     */
                    image?: string;
                };
            };
        };
        responses: {
            /** @description Profile image uploaded successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid file format or size */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UploadsController_getPostImages: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Post ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Post images retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Post not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UploadsController_uploadPostImages: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Post ID */
                id: string;
            };
            cookie?: never;
        };
        /** @description Post image files */
        requestBody: {
            content: {
                "multipart/form-data": {
                    /** @description Array of image files */
                    image?: string[];
                };
            };
        };
        responses: {
            /** @description Post images uploaded successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid file format or size */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Post not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UploadsController_getprofileImage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Beneficiary ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Profile image retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Beneficiary or profile image not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UploadsController_deletePostImage: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Post ID */
                postId: string;
                /** @description Image file name */
                imageName: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Image deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Post or image not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UploadsController_deleteProfileImage: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Profile image deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Profile image not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
